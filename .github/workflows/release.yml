name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    # 1. R√©cup√®re le code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. R√©cup√®re le num√©ro de version depuis le tag
    - name: Get version from tag
      id: get_version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version d√©tect√©e: $VERSION"
        
        # Convertit la version au format MSIX strict (X.X.X.X)
        $PARTS = $VERSION -split '\.'
        if ($PARTS.Count -eq 3) {
          # Format: 1.3.1 -> 1.3.1.0
          $MSIX_VERSION = "$VERSION.0"
        } elseif ($PARTS.Count -eq 4) {
          # Format: 1.3.1.1021 -> D√©j√† bon si < 65535
          $LAST = [int]$PARTS[3]
          if ($LAST -gt 65535) {
            # Prendre seulement les 4 derniers chiffres
            $PARTS[3] = $PARTS[3].Substring($PARTS[3].Length - 4)
          }
          $MSIX_VERSION = $PARTS -join '.'
        } else {
          # Fallback
          $MSIX_VERSION = "$VERSION.0.0.0"
        }
        
        echo "MSIX_VERSION=$MSIX_VERSION" >> $env:GITHUB_OUTPUT
        echo "Version MSIX: $MSIX_VERSION"
      shell: pwsh
    
    # 3. Met √† jour la version dans pubspec.yaml automatiquement
    - name: Update version in pubspec.yaml
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        $MSIX_VERSION = "${{ steps.get_version.outputs.MSIX_VERSION }}"
        $DATE = Get-Date -Format "yyMMdd"
        
        # Conversion MSIX au format strict X.X.X.X
        $PARTS = $MSIX_VERSION -split '\.'
        if ($PARTS.Count -eq 3) {
          # Si format 1.3.1, ajouter .0
          $MSIX_FINAL = "$MSIX_VERSION.0"
        } elseif ($PARTS.Count -eq 4) {
          # Si format 1.3.1.1021, extraire MMJJ et formater
          $MAJOR = $PARTS[0]
          $MINOR = $PARTS[1]
          $PATCH = $PARTS[2]
          $BUILD = $PARTS[3]
          # Si BUILD > 9999, prendre seulement les 4 derniers chiffres
          if ([int]$BUILD -gt 9999) {
            $BUILD = $BUILD.Substring($BUILD.Length - 4)
          }
          $MSIX_FINAL = "$MAJOR.$MINOR.$PATCH.$BUILD"
        } else {
          $MSIX_FINAL = "$VERSION.0"
        }
        
        # Mise √† jour version Flutter
        (Get-Content pubspec.yaml) -replace 'version: .*', "version: $VERSION+$DATE" | Set-Content pubspec.yaml
        
        # Mise √† jour version MSIX
        (Get-Content pubspec.yaml) -replace 'msix_version: .*', "msix_version: $MSIX_FINAL" | Set-Content pubspec.yaml
        
        echo "‚úÖ pubspec.yaml mis √† jour"
        echo "   Flutter: $VERSION+$DATE"
        echo "   MSIX: $MSIX_FINAL"
      shell: pwsh
    
    # 4. Installe Flutter
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.1'
        channel: 'stable'
    
    # 5. Installe les d√©pendances
    - name: Install dependencies
      run: flutter pub get
    
    # 6. Build Windows en Release
    - name: Build Windows Release
      run: flutter build windows --release
    
    # 7. Cr√©e le package MSIX (D√âSACTIV√â TEMPORAIREMENT)
    # - name: Create MSIX Package
    #   run: |
    #     echo "üî® Cr√©ation du package MSIX..."
    #     flutter pub run msix:create
    #     
    #     # V√©rifie que le MSIX a √©t√© cr√©√©
    #     if (Test-Path "build/windows/x64/runner/Release/*.msix") {
    #       echo "‚úÖ Package MSIX cr√©√© avec succ√®s"
    #       Get-ChildItem build/windows/x64/runner/Release/*.msix
    #     } else {
    #       echo "‚ùå Erreur: Package MSIX non trouv√©"
    #       exit 1
    #     }
    #   shell: pwsh
    
    # 8. Renomme le MSIX avec la version (D√âSACTIV√â TEMPORAIREMENT)
    # - name: Rename MSIX with version
    #   run: |
    #     $VERSION = "${{ steps.get_version.outputs.VERSION }}"
    #     $MSIX_FILE = Get-ChildItem -Path "build/windows/x64/runner/Release/*.msix" | Select-Object -First 1
    #     
    #     if ($MSIX_FILE) {
    #       $NEW_NAME = "XRTechTools-Windows-v$VERSION.msix"
    #       Copy-Item $MSIX_FILE.FullName -Destination $NEW_NAME
    #       echo "‚úÖ MSIX renomm√©: $NEW_NAME"
    #       echo "Taille: $([math]::Round($MSIX_FILE.Length / 1MB, 2)) MB"
    #     } else {
    #       echo "‚ùå Fichier MSIX non trouv√©"
    #       exit 1
    #     }
    #   shell: pwsh
    
    # 9. Cr√©e aussi un ZIP portable (optionnel)
    - name: Create Portable ZIP
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        cd build/windows/x64/runner/Release
        
        # Exclut le MSIX du ZIP
        $FILES = Get-ChildItem -Exclude "*.msix"
        Compress-Archive -Path $FILES -DestinationPath "../../../../../XRTechTools-Windows-Portable-v$VERSION.zip"
        
        echo "‚úÖ Version portable cr√©√©e: XRTechTools-Windows-Portable-v$VERSION.zip"
      shell: pwsh
    
    # 10. Build Android APK
    - name: Build Android APK
      run: flutter build apk --release
    
    # 11. Renomme l'APK avec la version
    - name: Rename APK with version
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        Copy-Item build/app/outputs/flutter-apk/app-release.apk -Destination "XRTechTools-Android-v$VERSION.apk"
        echo "‚úÖ APK cr√©√©: XRTechTools-Android-v$VERSION.apk"
      shell: pwsh
    
    # 12. Calcule les checksums (s√©curit√©)
    - name: Generate checksums
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        
        echo "# XR Tech Tools v$VERSION - Checksums SHA256" > checksums.txt
        echo "" >> checksums.txt
        
        # MSIX TEMPORAIREMENT D√âSACTIV√â
        # $MSIX_HASH = (Get-FileHash "XRTechTools-Windows-v$VERSION.msix" -Algorithm SHA256).Hash
        # echo "## Windows MSIX" >> checksums.txt
        # echo "``````" >> checksums.txt
        # echo "$MSIX_HASH  XRTechTools-Windows-v$VERSION.msix" >> checksums.txt
        # echo "``````" >> checksums.txt
        # echo "" >> checksums.txt
        
        # ZIP Portable
        $ZIP_HASH = (Get-FileHash "XRTechTools-Windows-Portable-v$VERSION.zip" -Algorithm SHA256).Hash
        echo "## Windows Portable (ZIP)" >> checksums.txt
        echo "``````" >> checksums.txt
        echo "$ZIP_HASH  XRTechTools-Windows-Portable-v$VERSION.zip" >> checksums.txt
        echo "``````" >> checksums.txt
        echo "" >> checksums.txt
        
        # APK
        $APK_HASH = (Get-FileHash "XRTechTools-Android-v$VERSION.apk" -Algorithm SHA256).Hash
        echo "## Android APK" >> checksums.txt
        echo "``````" >> checksums.txt
        echo "$APK_HASH  XRTechTools-Android-v$VERSION.apk" >> checksums.txt
        echo "``````" >> checksums.txt
        
        echo "‚úÖ Checksums g√©n√©r√©s (MSIX temporairement d√©sactiv√©)"
        Get-Content checksums.txt
      shell: pwsh
    
    # 13. Cr√©e la Release GitHub
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          XRTechTools-Windows-Portable-v${{ steps.get_version.outputs.VERSION }}.zip
          XRTechTools-Android-v${{ steps.get_version.outputs.VERSION }}.apk
          checksums.txt
        body: |
          ## üì¶ XR Tech Tools v${{ steps.get_version.outputs.VERSION }}
          
          **Application d'entra√Ænement et de pratique professionnelle pour techniciens informatique**
          
          ---
          
          ### ü™ü Windows
          
          #### Version Portable (ZIP) - RECOMMAND√â TEMPORAIREMENT
          üì• **`XRTechTools-Windows-Portable-v${{ steps.get_version.outputs.VERSION }}.zip`**
          
          **Installation :**
          1. Extraire le fichier ZIP
          2. Lancer `xrtechtools.exe`
          3. Aucune installation requise
          
          **Avantages :**
          - ‚úÖ Aucune installation requise
          - ‚úÖ Portable et l√©ger
          - ‚úÖ Fonctionne sur toutes les versions Windows
          
          ---
          
          ### üì± Android
          
          üì• **`XRTechTools-Android-v${{ steps.get_version.outputs.VERSION }}.apk`**
          
          **Installation :**
          1. Activez "Sources inconnues" dans les param√®tres de s√©curit√©
          2. Ouvrez le fichier APK t√©l√©charg√©
          3. Suivez les instructions d'installation
          
          ---
          
          ### üîí V√©rification de l'int√©grit√©
          
          Pour v√©rifier que vos fichiers t√©l√©charg√©s n'ont pas √©t√© alt√©r√©s, comparez les checksums SHA256 avec ceux du fichier `checksums.txt` inclus dans cette release.
          
          **Windows (PowerShell) :**
          ```powershell
          Get-FileHash "XRTechTools-Windows-Portable-v${{ steps.get_version.outputs.VERSION }}.zip" -Algorithm SHA256
          ```
          
          **Linux/macOS :**
          ```bash
          sha256sum XRTechTools-Windows-Portable-v${{ steps.get_version.outputs.VERSION }}.zip
          ```
          
          ---
          
          ### üìù Changements
          
          Consultez le [CHANGELOG.md](https://github.com/WolwX/xr-tech-tools/blob/main/CHANGELOG.md) pour la liste compl√®te des modifications.
          
          ---
          
          ### üêõ Signaler un probl√®me
          
          Si vous rencontrez un bug, ouvrez une [issue sur GitHub](https://github.com/WolwX/xr-tech-tools/issues).
          
          ---
          
          ### ‚ö†Ô∏è Note importante
          
          **Le package MSIX Windows est temporairement d√©sactiv√©** en raison de probl√®mes de compatibilit√© avec le nouveau nom d'application. Utilisez la version ZIP portable pour Windows.
          
          ---
          
          **D√©velopp√© par Xavier Redondo avec l'assistance de Claude (Anthropic)**
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # 14. Notification de succ√®s
    - name: Build Summary
      run: |
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "‚úÖ BUILD TERMIN√â AVEC SUCC√àS"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo ""
        echo "üì¶ Fichiers cr√©√©s:"
        echo "   ‚Ä¢ ZIP Windows (portable) - MSIX temporairement d√©sactiv√©"
        echo "   ‚Ä¢ APK Android"
        echo "   ‚Ä¢ Checksums SHA256"
        echo ""
        echo "üîó Release disponible sur:"
        echo "   https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo ""
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
      shell: pwsh