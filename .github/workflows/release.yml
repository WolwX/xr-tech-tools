name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    # 1. R√©cup√®re ton code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. R√©cup√®re le num√©ro de version depuis le tag
    - name: Get version from tag
      id: get_version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version d√©tect√©e: $VERSION"
      shell: pwsh
    
    # 3. Installe Flutter
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'  # ‚Üê Change cette ligne (√©tait 3.24.0)
        channel: 'stable'
    
    # 4. Installe les d√©pendances
    - name: Install dependencies
      run: flutter pub get
    
    # 5. Build Windows
    - name: Build Windows Release
      run: flutter build windows --release
    
    # 6. Copie les DLL n√©cessaires dans le build
    - name: Copy required DLLs
      run: |
        # Cr√©e un dossier pour les DLLs si n√©cessaire
        New-Item -ItemType Directory -Force -Path "build/windows/x64/runner/Release/dll"
        
        # Copie les DLLs depuis ton dossier dll/ (tu devras cr√©er ce dossier)
        # Ajuste le chemin selon o√π tu stockes tes DLLs
        if (Test-Path "dll/*.dll") {
          Copy-Item -Path "dll/*.dll" -Destination "build/windows/x64/runner/Release/" -Force
          echo "DLLs copi√©es avec succ√®s"
        } else {
          echo "‚ö†Ô∏è Aucune DLL trouv√©e dans le dossier dll/"
        }
      shell: pwsh
    
    # 7. Compresse le build Windows avec version dans le nom
    - name: Archive Windows Build
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        cd build/windows/x64/runner/Release
        Compress-Archive -Path * -DestinationPath "../../../../../XRTechTools-Windows-v$VERSION.zip"
        echo "Archive cr√©√©e: XRTechTools-Windows-v$VERSION.zip"
      shell: pwsh
    
    # 8. Build Android APK
    - name: Build Android APK
      run: flutter build apk --release
    
    # 9. Renomme l'APK avec la version
    - name: Rename APK with version
      run: |
        $VERSION = "${{ steps.get_version.outputs.VERSION }}"
        Copy-Item build/app/outputs/flutter-apk/app-release.apk -Destination "XRTechTools-v$VERSION.apk"
        echo "APK cr√©√©: XRTechTools-v$VERSION.apk"
      shell: pwsh
    
    # 10. Cr√©e la Release GitHub
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          XRTechTools-Windows-v${{ steps.get_version.outputs.VERSION }}.zip
          XRTechTools-v${{ steps.get_version.outputs.VERSION }}.apk
        body: |
          ## üì¶ XR Tech Tools v${{ steps.get_version.outputs.VERSION }}
          
          ### üì• T√©l√©chargements
          - **Windows** : `XRTechTools-Windows-v${{ steps.get_version.outputs.VERSION }}.zip`
          - **Android** : `XRTechTools-v${{ steps.get_version.outputs.VERSION }}.apk`
          
          ### ‚öôÔ∏è Installation Windows
          1. Extraire le fichier ZIP
          2. Lancer `xr_tech_tools.exe`
          3. Les DLLs n√©cessaires sont incluses dans le package
          
          ### üì± Installation Android
          1. Activer "Sources inconnues" dans les param√®tres
          2. Installer l'APK
          
          ### üìù Changements
          Voir le [CHANGELOG.md](https://github.com/WolwX/xr-tech-tools/blob/main/CHANGELOG.md)
          
          ### üîß DLLs incluses
          Toutes les d√©pendances n√©cessaires sont incluses dans le package Windows.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}